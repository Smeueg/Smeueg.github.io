#!/bin/sh

items=

err() {
    printf "\033[1;31mERROR\033[m: %b\n" "${1}"
}

warn() {
    printf "\033[1;33mWARNING\033[m: %b\n" "${1}"
}

get() {
    if [ "$(command -v curl)" ]; then
        curl -Ls "$1" -o "$2"
    else
        wget -q "$1" -O "$2"
    fi
}

prompt() {
    while true; do
        printf "%b [\033[1;32mY\033[m/\033[1;31mn\033[m] " "${1}"
        read response
        case ${response} in
            [Yy][Ee][Ss]|[Yy]|"") return 0;;
            [Nn][Oo]|[Nn]) return 1;;
            *) printf "Invalid response\n";;
        esac
    done
}

help="\
Usage: ${0##*/} [-h] [ITEMS]...

  Sets up the current system with [ITEMS]. If ${0##*/} is ran as root, then
  [ITEMS] will also change to configure the system

Items as non root:
  dotfiles  Downloads and sets up Smeueg's personal dotfiles
  fonts     Installs the JetBrainsMono Nerd Font in ~/.local/share/fonts/,
            requires 'curl' or 'wget'
  rustup    Installs rustup, which is then used to install rust, cargo, and
            rust-analyzer

Items as root:
  tmpfs       Mounts '/tmp/' as tmpfs with a size of 512MB
  swapfile    Creates a swapfile with a size of 4GB, requires 'mkswap' and
              'swapon'
  lightdm     Configures lightdm to use the gruvbox color scheme
"


if ! [ "${1}" ]; then
    err "No arguments specified, try '${0##*/} --help' for more information"
    exit 65
fi


if [ -w / ]; then
    # Items as root
    for arg in ${@}; do
        case ${arg} in
            tmpfs)
                if ! [ -f /etc/fstab ]; then
                    err "tmpfs: '/etc/fstab' doesn't exist"
                    exit 2
                fi
                while read -r line; do
			        [ "${line}" ] || continue
			        [ "${line%%*tmpfs */tmp *tmpfs*}" ] && continue
			        err "tmpfs: '/tmp/' is already mounted as tmpfs in '/etc/fstab'"
                    exit 3
		        done < /etc/fstab
                items="${items} tmpfs"
                ;;
            swapfile)
                if ! [ "$(command -v swapon)" ] || ! [ "$(command -v mkswap)" ]; then
                    err "swapfile: Command 'swapon' or 'mkswap' isn't found"
                    exit 127
                fi
                if [ -f /swapfile ]; then
                    err "swapfile: '/swapfile' already exists"
                    exit 3
                fi
                items="${items} swapfile"
                ;;
            lightdm)
                if ! [ -f /etc/lightdm/lightdm-gtk-greeter.conf ]; then
                    err "'/etc/lightdm/lightdm-gtk-greeter.conf' doesn't exist"
                    exit 2
                fi
                items="${items} lightdm"
                ;;
            -h | --help) printf "%s\n" "${help%?}"; exit 0 ;;
            *) err "Invalid item '${arg}'"; exit 1 ;;
        esac
    done
else
    # Items as non root
    for arg in ${@}; do
        case ${arg} in
            fonts)
                if ! { [ "$(command -v curl)" ] || [ "$(command -v wget)" ]; }; then
                    err "fonts: 'curl' and 'wget' aren't installed, at least one is needed to be installed"
                    exit 127
                fi
                items="${items} fonts"
                ;;
            rustup)
                if ! { [ "$(command -v curl)" ] || [ "$(command -v wget)" ]; }; then
                    err "rustup: 'curl' and 'wget' aren't installed, at least one is needed to be installed"
                    exit 127
                fi
                items="${items} rustup"
                ;;
            dotfiles)
                if ! [ "$(command -v git)" ]; then
                    err "dotfiles: 'git' isn't installed"
                    exit 127
                fi
                items="${items} dotfiles"
                ;;
            -h | --help) printf "%s\n" "${help%?}"; exit 0 ;;
            *) err "Invalid item '${arg}'"; exit 1 ;;
        esac
    done
fi

# Item functions
dotfiles() {
    dots_dir="${HOME}/.local/dots/"
    dots_url="https://github.com/Smeueg/Dotfiles.git"

    if [ -d "${dots_dir}" ]; then
        if ! prompt "'${dots_dir}' already exists, overwrite it?"; then
            printf "Won't overwrite '${dots_dir}'\n"
            return
        fi
    fi

    if ! git clone --progress --bare --depth 1 "${dots_url}" "${dots_dir}"; then
        err "Failed to clone dotfiles repository from '${dots_url}'"
        return 1
    fi

    if ! git --git-dir="${dots_dir}" config status.showUntrackedFiles no; then
        warn "Failed to configure local dotfiles repo to only show tracked files"
    fi

    files=$(git --git-dir="${dots_dir}" ls-tree --full-tree --name-only -r HEAD)
    for file in ${files}; do
        if [ -f "${HOME}/${file}" ]; then
            backup_dir="${HOME}/DotsBackup/${file}"
            backup_dir=${backup_dir%/*}
            printf "Backing up '${HOME}/${file}' to '${backup_dir}'\n"
            if ! mkdir -p "${backup_dir}"; then
                err "Failed to create directory '${backup_dir}'"
                return 1
            fi

            if ! mv "${HOME}/${file}" "${backup_dir}"; then
                err "Failed to move '${HOME}/${file}' to '${backup_dir}'"
                return 1
            fi
        fi
    done

    if ! git --git-dir="${dots_dir}" --work-tree="${HOME}" checkout; then
        err "Failed to checkout local dotfiles repo to '~/'"
    fi
}

fonts() {

    font_dir="${HOME}/.local/share/fonts/JetBrainsMono Nerd Font/"
	font_url="https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/JetBrainsMono/Ligatures"

    if ! { [ -d "${font_dir}" ] || mkdir -p "${font_dir}"; }; then
        err "Failed to create '${font_dir}'"
        return 1
    fi

	for line in $(get "${font_url}" -); do
		[ "${line}" ] || continue
		[ "${line##*/tree/master/patched-fonts/JetBrainsMono/Ligatures/*}" ] &&
			continue
		group=${line%\"*}
		group=${group##*/}
		url="https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/JetBrainsMono/Ligatures/${group}"
		for line in $(get "${url}" -); do
			[ "${line}" ] || continue
			[ "${line##*href*}" ] && continue
			[ "${line##*JetBrainsMonoNerdFontMono*}" ] && continue
			line=${line#*\"}
			line=${line%\"*}
			url="https://github.com${line%/blob/*}/raw/${line#*/blob/}"
			printf "Downloading JetBrains Mono Nerd Font %s\n" "${group}"
			get "${url}" "${font_dir}/JetBrainsMono Nerd Font ${group}.ttf"
		done
    done
}

rustup() {
    get https://sh.rustup.rs - | sh
}

tmpfs() {
    printf "tmpfs /tmp tmpfs rw,nodev,nosuid,size=512M 0 0\n" >> /etc/fstab
    if ! [ $? = 0 ]; then
        err "Failed to add '/tmp/' as tmpfs to '/etc/fstab'"
    fi
}

swapfile() {
    if ! dd if=/dev/zero of=/swapfile bs=1M count=1024 status=progress; then
        err "Failed to create '/swapfile' (dd)"
        return 1
    fi
    if ! chmod 0600 /swapfile; then
        err "Failed to change file permissions for '/swapfile' (chmod)"
        return 1
    fi
	if ! mkswap -U clear /swapfile; then
        err "Failed to set up '/swapfile' as swap (mkswap)"
        return 1
    fi
	if ! swapon /swapfile; then
        warn "Failed to enable '/swapfile' as swap (swapon)"
        return 1
    fi
	if ! printf "/swapfile none swap defaults 0 0\n" >> /etc/fstab; then
        err "Failed to add '/swapfile' to '/etc/fstab'"
    fi
}

lightdm() {
    mv /etc/lightdm/lightdm-gtk-greeter.conf /etc/lightdm/lightdm-gtk-greeter.conf.backup
    printf "[greeter]\n" > /etc/lightdm/lightdm-gtk-greeter.conf
	printf "background = #282828\n" >> /etc/lightdm/lightdm-gtk-greeter.conf
}

for item in ${items}; do
    printf "[ ─ \033[1;33m%s\033[m ─ ]\n" "${item}"
    ${item}
    printf "\n"
done
printf "\033[A"
