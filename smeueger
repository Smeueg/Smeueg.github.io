#!/bin/sh
# @name smeueger
# @brief A script to set up a Linux system
# @description A script to set up a Linux system with
# - Smeueg's dotfiles (https://github.com/Smeueg/Dotfiles)
# - Fonts (JetBrainsMono Nerd Font & Gohu Nerd Font)
# - Rustup
# - Flathub
# - GTK (A GTK theme alongside an icon pack with Gruvbox colors)
# - Matter
# - TMPFS (on /tmp)
# - A swapfile (/swapfile 1Gb)
# - LightDM (Gruvbox background)
# - Ly
# - auto-cpufreq
# - Enabling tap to click on a touchpad
items=

# @description Outputs a formatted string to warn the user to stdout
# @arg $1 string The warning message
warn() {
    printf "[\033[1;33mWARNING\033[m] %b\n" "${1}"
}

# @description Outputs a formatted string as an error to stderr
# @arg $1 string The error message
err() {
    printf "[\033[1;31mERROR\033[m] %b\n" "${1}" >&2
}

# @description Checks whether a list of executables exists
# @arg $1 item The associated item
# @arg $2 executables The list of executables to check as a single string
check_deps() {
    item=${1}
    exit=false
    for dep in ${2}; do
        if ! [ "$(command -v "${dep}")" ]; then
            err "${item}: '${dep}' is not installed"
            exit=true
        fi
    done
    if ${exit}; then
        exit 127
    fi
}

# @description Checks whether a list of libraries exists
# @arg $1 item The associated item
# @arg $2 libraries The list of libraries to check as a single string
check_libs() {
    item=${1}
    exit=false
    for lib in ${2}; do
        output=$(cc -l"${lib}" 2>&1)
        if [ "${output##*undefined reference to \`main\'*}" ]; then
            err "${item}: 'lib${lib}' is not installed"
            exit=true
        fi
    done
    if ${exit}; then
        exit 127
    fi
}

# @description Checks whether `curl` or `wget` is installed
# @noargs
check_curl_wget() {
    if ! { [ "$(command -v curl)" ] || [ "$(command -v wget)" ] ; }; then
        err "${1}: 'curl' and 'wget' aren't installed, either one is required"
        exit 127
    fi
}

# @description downloads a file from a url
# @arg $1 url The url
# @arg $2 filename The output file
get() {
    if [ "$(command -v curl)" ]; then
        curl -Ls "$1" -o "$2"
    elif  [ "$(command -v wget)" ]; then
        wget -q "$1" -O "$2"
    fi
}

# @description Asks the user for a yes no response
# @arg $1 string The question
# @exitcode 0 If user responded with a yes
# @exitcode 1 If user responded with a no
prompt() {
    while true; do
        printf "%b [\033[1;32mY\033[m/\033[1;31mn\033[m] " "${1}"
        read -r response
        case ${response} in
            [Yy][Ee][Ss]|[Yy]|"") return 0;;
            [Nn][Oo]|[Nn]) return 1;;
            *) printf "Invalid response\n";;
        esac
    done
}

# @description Adds an item to the global list of items
# @arg $1 item The item to add
items_add() {
    items="${items} ${1}"
}

help="\
Usage: smeueger [-h] [ITEMS]...

  Sets up the current system with [ITEMS]. If smeueger is ran as root, then
  [ITEMS] will also change to configure the system

Items as non root:
  dotfiles  Downloads and sets up Smeueg's personal dotfiles
  fonts     Installs the JetBrainsMono Nerd Font in '~/.local/share/fonts/'
  rustup    Installs 'rustup'
  lua_lsp   Installs lua-language-server
  flathub   Sets up Flathub for Flatpak
  gtk       Sets up a gruvbox theme for GTK using:
              - https://github.com/jmattheis/gruvbox-dark-gtk
              - https://github.com/jmattheis/gruvbox-dark-icons-gtk
  matter    Installs 'matter' to '/tmp/', a tool to rice 'grub'

Items as root:
  tmpfs         Mounts '/tmp/' as tmpfs with a size of 512MB
  swapfile      Creates a swapfile with a size of 4GB, requires 'mkswap' and
                'swapon'
  lightdm       Configures lightdm to use the gruvbox color scheme
  ly            Installs the ly display manager
  auto_cpufreq  Installs auto-cpufreq
  touchpad_tap  Configures the touchpad to enable click on tap
"


if ! [ "${1}" ]; then
    err "No arguments specified, try 'smeueger --help' for more information"
    exit 65
fi


if [ -w / ]; then
    # Items as root
    for arg in "${@}"; do
        case ${arg} in
            tmpfs)
                if ! [ -f /etc/fstab ]; then
                    err "tmpfs: '/etc/fstab' doesn't exist"
                    exit 2
                fi
                while read -r line; do
			        [ "${line}" ] || continue
			        [ "${line%%*tmpfs */tmp *tmpfs*}" ] && continue
			        err "tmpfs: '/tmp/' is already mounted as tmpfs in '/etc/fstab'"
                    exit 3
		        done < /etc/fstab
                items_add tmpfs
                ;;
            swapfile)
                check_deps swapfile "swapon mkswap"
                if [ -f /swapfile ]; then
                    err "swapfile: '/swapfile' already exists"
                    exit 3
                fi
                items_add swapfile
                ;;
            ly)
                check_deps ly "cc make git sed"
                check_libs ly "pam xcb"
                items_add ly
                ;;
            auto_cpufreq)
                check_deps auto_cpufreq "git"
                items_add auto_cpufreq
                ;;
            touchpad_tap)
                if ! [ -d "/etc/X11/xorg.conf.d/" ]; then
                    err "touchpad_tap: '/etc/X11/xorg.conf.d/' does not exist"
                    exit 2
                fi
                items_add touchpad_tap
                         ;;
                         lightdm)
                             if ! [ -f /etc/lightdm/lightdm-gtk-greeter.conf ]; then
                                 err "'/etc/lightdm/lightdm-gtk-greeter.conf' doesn't exist"
                                 exit 2
                             fi
                             items_add lightdm
                             ;;
                         -h | --help) printf "%s\n" "${help%?}"; exit 0 ;;
                         *) err "Invalid item '${arg}'"; exit 1 ;;
        esac
    done
else
    # Items as non root
    for arg in "${@}"; do
        case ${arg} in
            fonts)
                check_curl_wget fonts
                items_add fonts
                ;;
            rustup)
                check_curl_wget rustup
                items_add rustup
                ;;
            lua_lsp)
                check_deps lua_lsp "tar uname"
                check_curl_wget lua_lsp
                os=$(uname)
                if ! { [ "${os}" = "Linux" ] || [ "${os}" = "Darwin" ]; }; then
                    err "lua_lsp: Only supports Linux and MacOS"
                    exit 1
                fi
                items_add lua_lsp
                ;;
            dotfiles)
                check_deps dotfiles "git"
                items_add dotfiles
                ;;
            flathub)
                check_deps flathub "flatpak"
                items_add flathub
                ;;
            gtk)
                check_deps gtk "tar"
                check_curl_wget gtk
                items_add gtk
                ;;
            matter)
                check_deps matter "tar"
                check_curl_wget matter

                if ! { [ -w /tmp/ ] && [ -d /tmp/ ]; }; then
                    err "matter: /tmp is not writable or a directory"
                    exit 1
                fi

                items_add matter
                ;;
            -h | --help) printf "%s\n" "${help%?}"; exit 0 ;;
            *) err "Invalid item '${arg}'"; exit 1 ;;
        esac
    done
fi

# Item functions
dotfiles() {
    dots_dir="${HOME}/.local/dots/"
    dots_url="https://github.com/Smeueg/Dotfiles.git"

    if [ -d "${dots_dir}" ]; then
        if ! prompt "'${dots_dir}' already exists, overwrite it?"; then
            printf "Won't overwrite '%s'\n" "${dots_dir}"
            return
        fi
    fi

    if ! git clone --progress --bare --depth 1 "${dots_url}" "${dots_dir}"; then
        err "Failed to clone dotfiles repository from '${dots_url}'"
        return 1
    fi

    if ! git --git-dir="${dots_dir}" config status.showUntrackedFiles no; then
        warn "Failed to configure local dotfiles repo to only show tracked files"
    fi

    files=$(git --git-dir="${dots_dir}" ls-tree --full-tree --name-only -r HEAD)
    for file in ${files}; do
        if [ -f "${HOME}/${file}" ]; then
            backup_dir="${HOME}/DotsBackup/${file}"
            backup_dir=${backup_dir%/*}
            printf "Backing up '%s' to '%s'\n" \
                   "${HOME}/${file}" \
                   "${backup_dir=}"
            if ! mkdir -p "${backup_dir}"; then
                err "Failed to create directory '${backup_dir}'"
                return 1
            fi

            if ! mv "${HOME}/${file}" "${backup_dir}"; then
                err "Failed to move '${HOME}/${file}' to '${backup_dir}'"
                return 1
            fi
        fi
    done

    if ! git --git-dir="${dots_dir}" --work-tree="${HOME}" checkout; then
        err "Failed to checkout local dotfiles repo to '~/'"
    fi
}


fonts() {
    font_dir="${HOME}/.local/share/fonts/"
	font_url="https://github.com/ryanoasis/nerd-fonts/releases/latest/download"
    for font in "JetBrainsMono" "Gohu"; do
        printf "Downloading '%s Nerd Font'\n" "${font}"
        mkdir -pv "${font_dir}/${font}NerdFont"
        get "${font_url}/${font}.tar.xz" - |
            tar -xJf - -C "${font_dir}/${font}NerdFont"
    done
}


rustup() {
    get https://sh.rustup.rs - | sh
}


flathub() {
    flatpak remote-add --if-not-exists flathub \
            https://dl.flathub.org/repo/flathub.flatpakrepo
}


gtk() {
    dir_theme="${HOME}/.local/share/themes"
    dir_icons="${HOME}/.local/share/icons"
    url_theme="https://github.com/jmattheis/gruvbox-dark-gtk/archive/refs/tags/v1.0.2.tar.gz"
    url_icons="https://github.com/jmattheis/gruvbox-dark-icons-gtk/archive/refs/tags/v1.0.0.tar.gz"
    mkdir -pv "${dir_theme}" "${dir_icons}"
    printf "Getting GTK theme from: %s\n" "${url_theme}"
    get "${url_theme}" - | tar -xzf - -C "${dir_theme}"
    printf "Getting GTK icons from: %s\n" "${url_icons}"
    get "${url_icons}" - | tar -xzf - -C "${dir_icons}"
}


tmpfs() {
    entry="tmpfs /tmp tmpfs rw,nodev,nosuid,size=512M 0 0"
    if ! printf "%s\n" "${entry}" >> /etc/fstab; then
        err "Failed to add '/tmp/' as tmpfs to '/etc/fstab'"
    fi
}


swapfile() {
    if ! dd if=/dev/zero of=/swapfile bs=1M count=1024 status=progress; then
        err "Failed to create '/swapfile' (dd)"
        return 1
    fi
    if ! chmod 0600 /swapfile; then
        err "Failed to change file permissions for '/swapfile' (chmod)"
        return 1
    fi
	if ! mkswap -U clear /swapfile; then
        err "Failed to set up '/swapfile' as swap (mkswap)"
        return 1
    fi
	if ! swapon /swapfile; then
        warn "Failed to enable '/swapfile' as swap (swapon)"
        return 1
    fi
	if ! printf "/swapfile none swap defaults 0 0\n" >> /etc/fstab; then
        err "Failed to add '/swapfile' to '/etc/fstab'"
    fi
}


lightdm() {
    lightdm_conf="/etc/lightdm/lightdm-gtk-greeter.conf "
    mv "${lightdm_conf}" "${lightdm_conf}.backup"
    printf "[greeter]\n" > /etc/lightdm/lightdm-gtk-greeter.conf
	printf "background = #282828\n" >> /etc/lightdm/lightdm-gtk-greeter.conf
}


matter() {
    printf "Downloading 'matter' to '/tmp'\n"
    get https://github.com/mateosss/matter/archive/refs/tags/v1.2.2.tar.gz - |
        tar -xzf - -C /tmp/
    printf "%s\n" \
           "" \
           "For gruvbox, the appropriate arguments are:" \
           "  -bg 282828 -fg EBDBB2 -hl FE8019" ""
}


ly() {
    repo_url="https://github.com/fairyglade/ly"
    repo_dir="/tmp/ly"
    if ! git clone --recurse-submodules "${repo_url}" "${repo_dir}"; then
        err "Failed to clone '${repo_url}' to '${repo_dir}'"
        return 1
    fi
    if ! make --directory="${repo_dir}" install; then
        err "Failed to run 'make install' on '${repo_dir}'"
        return 1
    fi
    if [ "$(command -v systemctl)" ]; then
        make --directory="${repo_dir}" installsystemd &&
            systemctl enable ly.service --force
        bg="282828"
        fg="ebdbb2"
        escape_sequence_sed="\\\\033]P0${bg}\\\\033]P7${fg}\\\\033c"
        escape_sequence_printf="\\033]P0${bg}\\033]P7${fg}\\033c"
        sed -i "/^\[Service\]/a ExecStartPre=/usr/bin/printf '%%b' '${escape_sequence_sed}'"\
            /lib/systemd/system/ly.service
        printf "term_reset_cmd = /usr/bin/tput reset; /usr/bin/printf '%%b' '%s'\n" \
               "${escape_sequence_printf}" >> /etc/ly/config.ini
    fi
}


lua_lsp() {
    dir="${HOME}/.local/share/lua-language-server/"
    if ! mkdir -pv "${dir}"; then
        err "Failed to create directory '${dir}'"
        return 1
    fi

    json=$(curl -s https://api.github.com/repos/LuaLS/lua-language-server/releases/latest)
    arch=$(uname -m)
    os=$(uname)
    file_suffix=""
    script="${HOME}/.local/bin/lua-language-server"

    if [ "${os}" = "Linux" ]; then
        file_suffix="${file_suffix}linux"
    elif [ "${os}" = "Darwin" ]; then
        file_suffix="${file_suffix}darwin"
    fi
    if [ "${arch}" = "x86_64" ]; then
        file_suffix="${file_suffix}-x64"
    elif [ "${arch}" = "x86_64" ]; then
        file_suffix="${file_suffix}-arm64"
    fi
    file_suffix="${file_suffix}.tar.gz"

    for line in ${json}; do
        [ "${line##*/*${file_suffix}*}" ] && continue
        url=${line}
        url=${url#\"}
        url=${url%\"}
        break
    done

    get "${url}" - | tar -xzf - -C "${dir}"
    printf "#!/bin/sh\n" > "${script}"
    printf 'exec "${HOME}/.local/share/lua-language-server/bin/lua-language-server" "$@"\n' >> "${script}"
}


auto_cpufreq() {
    repo_url="https://github.com/AdnanHodzic/auto-cpufreq"
    repo_dir="/tmp/auto-cpufreq/"
    if ! git clone "${repo_url}" "${repo_dir}"; then
        err "Failed to clone '${repo_url}' to '${repo_dir}'"
        return 1
    fi
    "${repo_dir}/auto-cpufreq-installer"
}


touchpad_tap() {
    printf "%s\n" \
           'Section  "InputClass"' \
           '    Identifier  "touchpad overrides"' \
           '    Driver "libinput"' \
           '    MatchIsTouchpad "on"' \
           '    Option "Tapping" "on"' \
           '    Option "TappingButtonMap" "lmr"' \
           'EndSection' \
           > /etc/X11/xorg.conf.d/99-synaptics-overrides.conf
}


for item in ${items}; do
    printf "[ ─ \033[1;33m%s\033[m ─ ]\n" "${item}"
    if ${item}; then
        printf "Finished setting up %s...\n\n" "${item}"
    else
        printf "Failed setting up %s...\n\n" "${item}"
    fi
done

printf "\033[A"
